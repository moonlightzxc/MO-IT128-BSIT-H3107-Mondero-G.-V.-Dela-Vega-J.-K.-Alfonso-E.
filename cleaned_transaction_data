import pandas as pd
from sklearn.preprocessing import MinMaxScaler, StandardScaler
import numpy as np
import matplotlib.pyplot as plt

# Load and inspect dataset
df = pd.read_csv("/Users/gillianmondero/Downloads/Transaction_Data.csv")
print("Initial Dataset Structure:\n", df.head())
print("\nDataset Info:")
df.info()

# Remove duplicates
duplicates = df[df.duplicated()]
print(f"\nNumber of duplicate rows: {duplicates.shape[0]}")
df = df.drop_duplicates()
print(f"Shape after removing duplicates: {df.shape}")

# Handle missing values
missing_values = df.isnull().sum()
print("\nMissing values before imputation:\n", missing_values)
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    df[column] = df[column].fillna(df[column].median() if column == 'Transaction_Amount' else df[column].mean())
print("Missing values after imputation:\n", df.isnull().sum())

# Handle outliers in Transaction_Amount
Q1, Q3 = df['Transaction_Amount'].quantile([0.25, 0.75])
IQR = Q3 - Q1
lower_bound, upper_bound = Q1 - 1.5 * IQR, Q3 + 1.5 * IQR

outliers = df[(df['Transaction_Amount'] < lower_bound) | (df['Transaction_Amount'] > upper_bound)]
print(f"\nOutlier count: {outliers.shape[0]} ({(outliers.shape[0] / df.shape[0]) * 100:.2f}%)")

plt.figure(figsize=(10, 6))
plt.boxplot(df['Transaction_Amount'].dropna(), vert=False, patch_artist=True)
plt.title("Boxplot of Transaction Amounts")
plt.xlabel("Transaction Amount")
plt.show()

df['Transaction_Amount'] = df['Transaction_Amount'].clip(lower=lower_bound, upper=upper_bound)
print(f"Remaining outliers: {df[(df['Transaction_Amount'] < lower_bound) | (df['Transaction_Amount'] > upper_bound)].shape[0]}")

plt.figure(figsize=(10, 6))
plt.hist(df['Transaction_Amount'].dropna(), bins=30, edgecolor='black', alpha=0.7)
plt.title("Distribution of Transaction Amounts After Handling Outliers")
plt.xlabel("Transaction Amount")
plt.ylabel("Frequency")
plt.show()

# Log transformation
df['Log_Transaction_Amount'] = np.log1p(df['Transaction_Amount'])
print(f"\nSkewness after log transformation: {df['Log_Transaction_Amount'].skew()}")

plt.figure(figsize=(10, 6))
plt.hist(df['Log_Transaction_Amount'], bins=30, edgecolor='black', alpha=0.7)
plt.title("Distribution of Log-Transformed Transaction Amounts")
plt.xlabel("Log-Transformed Transaction Amount")
plt.ylabel("Frequency")
plt.show()

# Normalize Transaction_Amount
scaler = MinMaxScaler()
df['Normalized_Transaction_Amount'] = scaler.fit_transform(df[['Transaction_Amount']])

# One-hot encode Transaction_Type
df = pd.get_dummies(df, columns=['Transaction_Type'], prefix='Type')

# Convert Transaction_Date to datetime
df['Transaction_Date'] = pd.to_datetime(df['Transaction_Date'])

# Drop Transaction_ID since it's not needed anymore
df = df.drop(columns=['Transaction_ID'])

# Sort by Customer_ID and reset index
df_sorted = df.sort_values(by='Customer_ID', ascending=True)
df_sorted.reset_index(drop=True, inplace=True)

# Correlation matrix for the dataset
correlation_matrix = df.corr()
print("Correlation Matrix:\n", correlation_matrix)

# Aggregate features by Customer_ID
customer_features = df.groupby('Customer_ID').agg(
    Transactions_Per_Customer=('Customer_ID', 'size'),
    Average_Transaction_Amount=('Transaction_Amount', 'mean'),
    Total_Transaction_Amount=('Transaction_Amount', 'sum'),
    Recency=('Transaction_Date', lambda x: (df['Transaction_Date'].max() - x.max()).days),
    **{f'Count_{col}': (col, 'sum') for col in df.columns if col.startswith('Type_')}
).reset_index()

customer_features['Average_Transaction_Amount'] = customer_features['Average_Transaction_Amount'].round(2)
customer_features['Total_Transaction_Amount'] = customer_features['Total_Transaction_Amount'].round(2)

# Normalize features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(customer_features[['Transactions_Per_Customer', 
                                                          'Average_Transaction_Amount', 
                                                          'Total_Transaction_Amount', 
                                                          'Recency'] + [f'Count_{col}' for col in df.columns if col.startswith('Type_')]])

print("\nFinal Cleaned Customer Transactions:")
print(customer_features)

# Save to CSV
customer_features.to_csv("final_customer_transactions.csv", index=False)
