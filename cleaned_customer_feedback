import pandas as pd
import numpy as np

# Load the dataset
df = pd.read_csv("/Users/gillianmondero/Downloads/Customer_Feedback_Data.csv")
# Check the dataset structure
print(df.head())
print(df.info())

# Find and remove duplicate rows
duplicates = df[df.duplicated()]
print(f"Number of duplicate rows: {duplicates.shape[0]}")

df_before = df.shape
df = df.drop_duplicates()
df_after = df.shape

print(f"Shape before removing duplicates: {df_before}")
print(f"Shape after removing duplicates: {df_after}")

# Handle missing values
missing_values = df.isnull().sum()
print("Missing values in each column:\n", missing_values)
df['Satisfaction_Score'] = df['Satisfaction_Score'].fillna(df['Satisfaction_Score'].median())
print("Missing values in Satisfaction_Score column after imputation:", df['Satisfaction_Score'].isnull().sum())

# Convert categorical features to numerical
df['Feedback_Comments'] = df['Feedback_Comments'].astype('category')
df['Feedback_Comments_Encoded'] = df['Feedback_Comments'].cat.codes
print("Original and Encoded Feedback_Comments:\n", df[['Feedback_Comments', 'Feedback_Comments_Encoded']].head())

# Calculate skewness for numeric columns
skewness = df[['Satisfaction_Score', 'Likelihood_to_Recommend']].skew()

# Display skewness
print(skewness)

# Calculate IQR for Satisfaction_Score
Q1 = df['Satisfaction_Score'].quantile(0.25)
Q3 = df['Satisfaction_Score'].quantile(0.75)
IQR = Q3 - Q1

# Define outlier bounds
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Impute outliers for Satisfaction_Score with median
df['Satisfaction_Score'] = df['Satisfaction_Score'].apply(lambda x: df['Satisfaction_Score'].median() if x < lower_bound or x > upper_bound else x)

# Calculate IQR for Likelihood_to_Recommend
Q1 = df['Likelihood_to_Recommend'].quantile(0.25)
Q3 = df['Likelihood_to_Recommend'].quantile(0.75)
IQR = Q3 - Q1

# Define outlier bounds
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Impute outliers for Likelihood_to_Recommend with mean
df['Likelihood_to_Recommend'] = df['Likelihood_to_Recommend'].apply(lambda x: df['Likelihood_to_Recommend'].mean() if x < lower_bound or x > upper_bound else x)

# Clean Satisfaction_Score and Feedback_Comments using updated rules
def clean_feedback(score):
    if score >= 10:
        return "Excellent"
    elif 8 <= score < 10:
        return "Very satisfied"
    elif 5 <= score < 8:
        return "Good service"
    elif 3 <= score < 5:
        return "Needs improvement"
    elif score < 3:
        return "Unsatisfactory"
    return None

# Apply the cleaning function
df['Feedback_Comment'] = df['Satisfaction_Score'].apply(clean_feedback)

# Normalize Satisfaction_Score
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df['Satisfaction_Score_Normalized'] = scaler.fit_transform(df[['Satisfaction_Score']])

# Normalize 'Likelihood_to_Recommend'
df['Likelihood_to_Recommend_Normalized'] = scaler.fit_transform(df[['Likelihood_to_Recommend']])

# Confirm normalization
print("Normalized 'Likelihood_to_Recommend':")
print(df[['Likelihood_to_Recommend', 'Likelihood_to_Recommend_Normalized']].head())

# Confirm the outliers have been handled
print("Outliers after imputation:")
print(df.isnull().sum())

# Remove the original Feedback_Comments column
if 'Feedback_Comments' in df.columns:
    df.drop(columns=['Feedback_Comments'], inplace=True)

# Categorize Likelihood_to_Recommend without overwriting original values
df['Recommendation_Category'] = pd.cut(
    df['Likelihood_to_Recommend'], 
    bins=[0, 4, 7, 10], 
    labels=['Low', 'Medium', 'High'], 
    right=True
)

# Categorize Satisfaction_Score
df['Satisfaction_Category'] = pd.cut(
    df['Satisfaction_Score'], 
    bins=[0, 3, 6, 10], 
    labels=['Dissatisfied', 'Neutral', 'Satisfied'], 
    right=True
)

# Display the updated dataset for the first 5 customers
print("Updated Dataset with Feedback Comments and Likelihood to Recommend:\n", df[['Customer_ID', 'Satisfaction_Score', 'Feedback_Comment', 'Likelihood_to_Recommend']].head())

# Summary of the dataset
print("Dataset Summary:\n", df.describe())
print("\nUnique values per column:\n", df.nunique())

# Save file
df.to_csv("cleaned_customer_feedback.csv", index=False)
