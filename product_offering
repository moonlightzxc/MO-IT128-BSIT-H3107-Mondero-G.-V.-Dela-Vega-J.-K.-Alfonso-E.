import pandas as pd
import numpy as np

# Load the dataset
df = pd.read_csv("/Users/gillianmondero/Downloads/Product_Offering_Data.csv")

# Check the dataset structure
print(df.head())
print(df.info())

# Find and remove duplicate rows
duplicates = df[df.duplicated()]
print(f"Number of duplicate rows: {duplicates.shape[0]}")

df_before = df.shape
df = df.drop_duplicates()
df_after = df.shape

print(f"Shape before removing duplicates: {df_before}")
print(f"Shape after removing duplicates: {df_after}")

# Check for missing values
missing_values = df.isnull().sum()
print("Missing values in each column:\n", missing_values)

# Handle the completely missing Target_Age_Group column by inferring values
print("Target_Age_Group is entirely missing. Inferring values based on other columns...")

# One-hot encode categorical variables
categorical_columns = ['Product_Type', 'Risk_Level', 'Target_Income_Group']
df = pd.get_dummies(df, columns=categorical_columns, drop_first=True)

# Define a rule-based inference for Target_Age_Group
def infer_age_group(row):
    if row.get('Risk_Level_Low', 0) == 1:
        return np.random.uniform(18, 30)  # Younger age group for low-risk products
    elif row.get('Risk_Level_Medium', 0) == 1:
        return np.random.uniform(30, 50)  # Middle-aged group for medium-risk products
    else:  # Assume 'Risk_Level_High' (if applicable)
        return np.random.uniform(50, 65)  # Older group for high-risk products

# Apply the inference logic to infer the missing Target_Age_Group
df['Target_Age_Group'] = df.apply(infer_age_group, axis=1)

# Round Target_Age_Group to two decimal places
df['Target_Age_Group'] = df['Target_Age_Group'].round(2)

# Create the Product_Category feature
df['Product_Category'] = df[['Product_Type_Investment', 'Product_Type_Loan', 'Product_Type_Savings Account']].idxmax(axis=1)
df['Product_Category'] = df['Product_Category'].map({
    'Product_Type_Investment': 'Investment',
    'Product_Type_Loan': 'Loan',
    'Product_Type_Savings Account': 'Savings'
})

# Create the Risk_Score feature
df['Risk_Score'] = (
    df['Risk_Level_Low'] * 1 +
    df['Risk_Level_Medium'] * 2
)

# Save or print final preprocessed data
print(df.head())

# Save file
df.to_csv("product_offering.csv", index=False)
